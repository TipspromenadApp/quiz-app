// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quiz_app;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("quiz_app.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionD")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectAnswer = "Te",
                            OptionA = "Apelsinjuice",
                            OptionB = "Vatten",
                            OptionC = "Te",
                            OptionD = "Mjölk",
                            Text = "Vilken av dessa drycker innehåller vanligtvis koffein?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 2,
                            CorrectAnswer = "Sjögräs",
                            OptionA = "Sjögräs",
                            OptionB = "Sallad",
                            OptionC = "Rispapper",
                            OptionD = "Plast",
                            Text = "Vad är sushi traditionellt inlindad i?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 3,
                            CorrectAnswer = "Lyssna på lugn musik",
                            OptionA = "Lyssna på lugn musik",
                            OptionB = "Äta mer socker",
                            OptionC = "Hoppa över sömn",
                            OptionD = "Bråka på nätet",
                            Text = "Vilket av följande är ett vanligt sätt att minska stress?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 4,
                            CorrectAnswer = "Honung",
                            OptionA = "Honung",
                            OptionB = "Smör",
                            OptionC = "Olja",
                            OptionD = "Mjölk",
                            Text = "Vad producerar bin?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 5,
                            CorrectAnswer = "Äpple",
                            OptionA = "Äpple",
                            OptionB = "Sallad",
                            OptionC = "Morot",
                            OptionD = "Broccoli",
                            Text = "Vilken av dessa räknas som en frukt?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 6,
                            CorrectAnswer = "Frankrike",
                            OptionA = "Frankrike",
                            OptionB = "Italien",
                            OptionC = "Tyskland",
                            OptionD = "Spanien",
                            Text = "Vilket land är känt för Eiffeltornet?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 7,
                            CorrectAnswer = "Dator",
                            OptionA = "Dator",
                            OptionB = "Mikrovågsugn",
                            OptionC = "TV",
                            OptionD = "Ugn",
                            Text = "Vad använder du för att skicka e-post?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 8,
                            CorrectAnswer = "Solljus",
                            OptionA = "Solljus",
                            OptionB = "Mörker",
                            OptionC = "Plast",
                            OptionD = "Rök",
                            Text = "Vad hjälper växter att växa?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 9,
                            CorrectAnswer = "Gitarr",
                            OptionA = "Gitarr",
                            OptionB = "Tallrik",
                            OptionC = "Stol",
                            OptionD = "Sked",
                            Text = "Vilken av följande är ett musikinstrument?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 10,
                            CorrectAnswer = "Flingor",
                            OptionA = "Flingor",
                            OptionB = "Pizza",
                            OptionC = "Biff",
                            OptionD = "Popcorn",
                            Text = "Vad är en vanlig frukostmat?",
                            Type = "multiple"
                        });
                });

            modelBuilder.Entity("quiz_app.Models.QuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuizResultId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Round")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SelectedAnswer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAnswer")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuizResultId");

                    b.ToTable("QuizAnswers");
                });

            modelBuilder.Entity("quiz_app.Models.QuizResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BotName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BotScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameMode")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("quiz_app.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("quiz_app.Models.QuizAnswer", b =>
                {
                    b.HasOne("quiz_app.Models.QuizResult", "QuizResult")
                        .WithMany("Answers")
                        .HasForeignKey("QuizResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizResult");
                });

            modelBuilder.Entity("quiz_app.Models.QuizResult", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
